name: CI

on:
  push:
  pull_request:

jobs:
  build-and-test:
    name: Build & Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        toolchain: [stable]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          override: true

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-

      - name: Run tests
        run: cargo test --all

  build-release-zip:
    name: Build Release-Zip
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      contents: write
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ubuntu-latest-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ubuntu-latest-cargo-registry-

      - name: Install Zig (via npm)
        run: |
          sudo apt-get update
          sudo apt-get install -y nodejs npm
          sudo npm install -g @ziglang/cli

      - name: Cache cargo-lambda
        id: cache-cargo-lambda
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cargo-lambda
          key: cargo-lambda-bin-v1

      - name: Install cargo-lambda (if not cached)
        if: steps.cache-cargo-lambda.outputs.cache-hit != 'true'
        run: cargo install cargo-lambda

      - name: Build Lambda binary
        run: cargo lambda build --release --output-format zip

      - name: Commit & Push Lambda Zip
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git checkout main
          cp target/lambda/item-write-lambda/bootstrap.zip bootstrap.zip
          git add bootstrap.zip
          git commit -m "add Lambda release bootstrap zip" || echo "No changes to commit"
          git push origin main
